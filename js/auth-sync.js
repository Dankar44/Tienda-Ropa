/**
 * Auth Sync - Detecta cambios de autenticaci√≥n y sincroniza wishlist
 * Mejorado para sincronizaci√≥n autom√°tica √∫nica al iniciar sesi√≥n/registrarse
 */

class AuthSync {
    constructor() {
        this.lastAuthState = false;
        this.syncCompleted = false; // Flag para evitar m√∫ltiples sincronizaciones
        this.init();
    }

    init() {
        console.log('üîê Inicializando AuthSync...');
        
        // Verificar estado inicial
        this.checkAuthState();
        
        // Configurar polling para detectar cambios
        setInterval(() => {
            this.checkAuthState();
        }, 1000);
    }

    checkAuthState() {
        const token = localStorage.getItem('cronox-token');
        const isAuthenticated = !!token;
        
        // Si el estado cambi√≥
        if (isAuthenticated !== this.lastAuthState) {
            console.log(`üîÑ Estado de autenticaci√≥n cambi√≥: ${this.lastAuthState} ‚Üí ${isAuthenticated}`);
            
            if (isAuthenticated) {
                this.onUserLogin();
            } else {
                this.onUserLogout();
            }
            
            this.lastAuthState = isAuthenticated;
        }
    }

    async onUserLogin() {
        // Solo sincronizar si no se ha completado ya
        if (this.syncCompleted) {
            console.log('‚ÑπÔ∏è Sincronizaci√≥n ya completada anteriormente, saltando...');
            return;
        }

        console.log('‚úÖ Usuario inici√≥ sesi√≥n, iniciando sincronizaci√≥n autom√°tica...');
        console.log('üîç Se ha iniciado sesi√≥n, se va a revisar si hay alg√∫n elemento nuevo en la wishlist no registrado');
        
        // Marcar como completada para evitar m√∫ltiples ejecuciones
        this.syncCompleted = true;
        
        // Esperar un poco para que los managers se inicialicen
        setTimeout(async () => {
            // Priorizar wishlistManager sobre otros managers
            if (window.wishlistManager) {
                console.log('üéØ Usando wishlistManager para sincronizaci√≥n...');
                await window.wishlistManager.syncOnLogin();
            } else if (window.simpleWishlistSync) {
                console.log('üîÑ Usando simpleWishlistSync como fallback...');
                await window.simpleWishlistSync.syncOnLogin();
            } else if (window.wishlistSyncManager) {
                console.log('üîÑ Usando wishlistSyncManager como fallback...');
                await window.wishlistSyncManager.onUserLogin();
            } else {
                console.error('‚ùå No hay ning√∫n manager de sincronizaci√≥n disponible');
            }
        }, 500);
    }

    onUserLogout() {
        console.log('‚ùå Usuario cerr√≥ sesi√≥n');
        // Resetear flag de sincronizaci√≥n para la pr√≥xima sesi√≥n
        this.syncCompleted = false;
    }

    /**
     * M√©todo para forzar sincronizaci√≥n manual (√∫til para testing)
     */
    async forceSync() {
        console.log('üîÑ Forzando sincronizaci√≥n manual...');
        this.syncCompleted = false;
        await this.onUserLogin();
    }
}

// Crear instancia global
window.authSync = new AuthSync();
